{"version":3,"sources":["components/filter.js","components/showPersons.js","components/personForm.js","components/Notification.js","services/persons.js","index.js"],"names":["Filter","props","value","newFilter","onChange","handleFilterChange","Button","onClick","handleClick","text","ShowPersons","filteredPersons","persons","filter","person","name","toLowerCase","includes","console","log","map","number","window","confirm","deletePerson","PersonForm","onSubmit","addRecord","newName","handleNameChange","newNumber","handleNumberChange","type","Notification","message","isError","style","background","borderStyle","borderRadius","padding","marginBottom","color","fontStyle","fontSize","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","notificationMessage","setNotificationMessage","getAllPersons","personsService","initialPersons","useEffect","length","setEmptyNotication","timeOut","setTimeout","isNameInArray","event","target","preventDefault","every","returnedPersons","concat","existingPerson","find","personObject","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5520f664.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = (props) =>\n{\n    return (\n        <div>\n            filter: <input value={props.newFilter} onChange={props.handleFilterChange}/>\n        </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst Button = (props) => {\n    return (\n      <button onClick={props.handleClick}>\n        {props.text}\n      </button>\n    )\n  }\n\nconst ShowPersons = (props) =>\n{\n    let filteredPersons = props.persons.filter(person => person.name.toLowerCase().includes(props.newFilter.toLowerCase()))\n\n    const deletePerson = person => {\n        if (window.confirm(\"Vahvista \" + person.name + \" poistaminen.\"))\n        {\n            console.log('Delete: ', person.name)\n            props.deletePerson(person) //deletePerson funktio sijaitsee index.js tiedostossa.\n        }\n    }\n\n    console.log('Phone number: ', filteredPersons.map(person => person.number))\n    return (\n        <>\n            {filteredPersons.map(person => <div key={person.name}> {person.name} {person.number} \n            <Button handleClick={() => deletePerson(person)} text=\"remove\" /> </div>)}\n        </>\n    )\n\n}\n\nexport default ShowPersons","import React from 'react'\n\nconst PersonForm = (props) =>\n{\n\n    return (\n        <form onSubmit={props.addRecord}>\n            <div>\n                name: <input value={props.newName} onChange={props.handleNameChange} />\n            </div>\n            <div>\n                number: <input value={props.newNumber} onChange={props.handleNumberChange}/>\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm\n","import React from 'react'\n\nconst Notification = ({ message, isError}) => {\n\n    // Inline tyylimäärittely jotta komponentti olisi \n    const errorStyle = {\n        background: 'lightgrey',\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10,\n        color: 'red',\n        fontStyle: 'italic',\n        fontSize: 20\n      }\n\n      const infoStyle = {\n        background: 'lightgrey',\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10,\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 20\n      }\n\n    if (message === null) {\n      return null\n    }\n\n    return (\n    <div style={isError ?  errorStyle :  infoStyle} >\n        {message}\n    </div>\n    )\n  }\n\nexport default Notification","import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n//const baseUrl = 'https://puhluetbckend.herokuapp.com/api/persons'\n\n// Noutaa koko tietokannan\nconst getAll = () => {\n  console.log(\"Get All\")\n  // axios.get palauttaa promisen (request), se edustaa asynkronista operaatiota ja voi olla kolmessa eri tilassa.\n  const request = axios.get(baseUrl)\n  // Ei palauteta promisea request. Vaan \n  return request.then(response => response.data)\n}\n\nconst deletePerson = person => {\n  console.log(\"Delete person from db\", person.name,)\n  const request = axios.delete(`${baseUrl}/${person.id}`)\n  return request.then(response => response.data)\n}\n\n// Luo koko tietokannan \nconst create = newObject => {\n  console.log(\"Create new db record \", newObject)\n  // Promise-oliota ei ole yleensä tarvetta tallettaa muuttujaan, \n  // ja onkin tapana ketjuttaa metodin then kutsu suoraan axiosin metodin kutsun perään:\n  //const request = axios.post(baseUrl, newObject)\n  return axios.post(baseUrl, newObject).then(response =>  response.data)\n  //return request.then(response =>  response.data)\n}\n\n// Päivittää olemassa olevan tietueen\nconst update = (id, newObject) => {\n  console.log(\"Update db record:\" + id, newObject)\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { getAll, create, update, deletePerson }","import React, { useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom'\nimport Filter from './components/filter.js'\nimport ShowPersons from './components/showPersons.js'\nimport PersonForm from './components/personForm.js'\nimport Notification from './components/Notification.js'\nimport personsService from './services/persons.js'\n\nconst App = () => {\n  \n  //state hookien rekisteröinti komponentin tilojen päivittämiseen.\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ notificationMessage, setNotificationMessage] = useState({message: null, isError: false})\n\n  // Kolmella alla olevalla eventHandlerillä päivitetään käyttöliittymää\n  // esimerkiksi handleNameChange päivittää komponentin tilan aina kun lomakkeen name kenttään tulee muutos.\n  const handleNameChange = (event) => {\n    //console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    //console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    //console.log(event.target.value)\n    setNewFilter(event.target.value)\n  }\n\n  const getAllPersons = () => {\n    // Haetaan data palvelimelta ja asetetaan se setPerson() hookien avulla.\n    personsService.getAll()\n      .then(initialPersons => {\n        console.log('promise fulfilled')\n        setPersons(initialPersons)\n      })\n  }\n\n  /* Siinä vaiheessa kun data saapuu palvelimelta, Javascriptin runtime kutsuu \n  rekisteröityä tapahtumankäsittelijäfunktiota, joka tulostaa konsoliin promise \n  fulfilled sekä tallettaa tilaan palvelimen palauttamat muistiinpanot funktio*/ \n  useEffect(() => {\n    console.log('effect')\n    getAllPersons()\n    \n  }, []) // tyhjä taulukko viimeisenä parametrinä määrittää sen, että komponentti päivitetään vain kerran.\n\n  console.log('render', persons.length, 'notes')\n\n  const setEmptyNotication = (timeOut) => {\n    setTimeout(() => {  \n      setNotificationMessage({message: null, isError: false})\n    }, timeOut)\n  }\n\n  // addRecord kutsutaan kun nappia painetaan.\n  const addRecord = (event) => {\n    event.preventDefault() // Tällä estetään eventin oletustoiminto\n    console.log('button clicked', event.target)\n\n    // \n    if (persons.every(isNameInArray))\n    {\n      const personObject = {\n        name: newName,\n        number: newNumber\n      } \n\n      personsService.create(personObject)\n        .then(returnedPersons => {\n          console.log(\"personService.post returned person is:\", returnedPersons)\n          \n          // Asetetaan uusi yhteystieto komponentin tilaan vasta kun se on päivitetty palvelimelle.\n          console.log('setPerson name: ', newName)\n          setPersons(persons.concat(returnedPersons)) //returnedPerson sisältää oikean ID-kentän joten käytetään sitä.\n\n          setNewName('')\n          setNewNumber('')\n\n          setNotificationMessage({message: `Uusi tietue ${returnedPersons.name} lisätty`, isError: false})\n          setEmptyNotication(5000)\n      })\n    }\n    else //if (persons.find(person => person.name === newName))\n    {\n      console.log(\"Phone number update\")\n\n      const existingPerson = persons.find(person => person.name === newName)\n        \n      if (window.confirm(\"Henkilö \" + existingPerson.name + \" on jo olemassa. Päivitetäänkö puhelinnumero?\"))\n        {\n          const personObject = {\n            name: newName,\n            number: newNumber\n          } \n\n          personsService.update(existingPerson.id, personObject).then(() => {\n          // Vasta kun tieto on saatu päivitettyä palvelimelle, niin kentät tyhjennetään ja \n          // päivitetty data ladataan palvelimelta.\n          setNewName('')\n          setNewNumber('')\n          getAllPersons()\n\n          setNotificationMessage({message: `Henkilön ${personObject.name} puhelinnumero päivitetty`, isError: false})\n          setEmptyNotication(5000)\n          })\n        }\n    }\n    /*else \n      window.alert(`${newName} is already added to phonebook`)*/\n  }\n\n  /* isNameInArray on viittaus nuolifunktioon, joka saa parametrikseen person objektin.\n     Koska parametrejä on vain yksi, ei sulkuja tarvita.\n     Funktio sisältää vain yhden lausekkeen, jonka vuoksi ei aaltosulkuja tai return sanaa tarvita.\n  */ \n  const isNameInArray = person => person.name !== newName;\n\n  const deletePerson = person => {\n    console.log(\"Index.js deletePerson: \", person.name )\n\n    personsService.deletePerson(person).then(data => {\n      console.log('Person deleted', data)\n      \n      getAllPersons() // Päivitetään App-komponentin persontaulukko vastaamaan palvelimen dataa.\n\n      setNotificationMessage({message: `Henkilö ${person.name} poistettu`, isError: false})\n      setEmptyNotication(5000)\n    })\n    .catch(error => {\n      getAllPersons() // Päivitetään App-komponentin persontaulukko vastaamaan palvelimen dataa.\n      setNotificationMessage({message: `Henkilö ${person.name} on jo poistettu palvelimelta.`, isError: true})\n      setEmptyNotication(5000)\n    })\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage.message} isError={notificationMessage.isError} />\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n      <h2>Add new</h2>\n      <PersonForm newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} addRecord={addRecord} />\n      <h2>Numbers</h2>\n      <ShowPersons persons={persons} newFilter={newFilter} deletePerson={deletePerson}/> \n    </div>\n  )\n\n}\n\nReactDOM.render(<App /> , document.getElementById('root'))"],"sourceRoot":""}